# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.version.outputs.tag }}
    steps:
    - 
      uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - 
      id: version
      name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.36.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DEFAULT_BUMP: 'patch'
        
  # This workflow contains a single job called "build"
  build-ui:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/webm_ui:${{needs.bump-version.outputs.new_tag}}
          file: 'ui.Dockerfile'

  build-crawler:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/webm_crawler:${{needs.bump-version.outputs.new_tag}}
          file: 'crawler.Dockerfile'

  build-api:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      needs: bump-version
      steps:
        -
          name: Set up QEMU
          uses: docker/setup-qemu-action@v1
        -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1
        -
          name: Login to DockerHub
          uses: docker/login-action@v1 
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        -
          name: Build and push
          id: docker_build
          uses: docker/build-push-action@v2
          with:
            push: true
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/webm_api:${{needs.bump-version.outputs.new_tag}}
            file: 'api.Dockerfile'
  deploy:
      runs-on: ubuntu-latest
      needs: [bump-version, build-ui, build-crawler, build-api]
      env:
       TARGET_FOLDER: ci_webm_stock
      steps:
        -
          name: Checkout new tag
          uses: actions/checkout@v2
        - 
          name: Copy file via ssh password
          uses: appleboy/scp-action@v0.1.1
          with:
            host: ${{ secrets.SSH_PROD_HOST }}
            port: ${{ secrets.SSH_PROD_PORT }}
            username: ${{ secrets.SSH_PROD_USERNAME }}
            key: ${{ secrets.SSH_PROD_KEY }}
            source: "deploy/prod/*"
            target: ${{env.TARGET_FOLDER}}
            rm: true
        - 
          name: Executing remote ssh commands
          uses: appleboy/ssh-action@v0.1.4
          with:
            host: ${{ secrets.SSH_PROD_HOST }}
            port: ${{ secrets.SSH_PROD_PORT }}
            username: ${{ secrets.SSH_PROD_USERNAME }}
            key: ${{ secrets.SSH_PROD_KEY }}
            script: |
              cd ${{env.TARGET_FOLDER}}/deploy/prod/
              echo "TAG=${{needs.bump-version.outputs.new_tag}}" > .env
              docker-compose -f ./docker-compose.prod.yml stop
              docker-compose -f ./docker-compose.prod.yml up -d
